"""
New Pressure Views - ‡∏¢‡∏∂‡∏î Low Frequency ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
"""
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import UpdateView
from django.urls import reverse_lazy
from django.contrib import messages
from calibrate.models import CalibrationPressure, CalibrationEquipmentUsed
from calibrate.forms import CalibrationPressureForm


class CalibrationPressureUpdateViewNew(LoginRequiredMixin, UpdateView):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Pressure - ‡πÉ‡∏ä‡πâ template ‡πÉ‡∏´‡∏°‡πà"""
    model = CalibrationPressure
    form_class = CalibrationPressureForm
    template_name = 'calibrate/pressure_form_new.html'
    success_url = reverse_lazy('calibrate-dashboard')
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = f'‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Pressure - {self.object.uuc_id.name}'
        return context
    
    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        if self.request.method == 'POST':
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default value ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö status ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
            if 'status' not in self.request.POST:
                kwargs['data'] = kwargs.get('data', {}).copy()
                kwargs['data']['status'] = 'in_progress'
        return kwargs
    
    def form_invalid(self, form):
        print("=== DEBUG: Form is invalid ===")
        print(f"Form errors: {form.errors}")
        print(f"Form non_field_errors: {form.non_field_errors()}")
        return super().form_invalid(form)
    
    def form_valid(self, form):
        print("=== DEBUG: ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Pressure New ===")
        print(f"POST data: {dict(self.request.POST)}")
        print(f"Form is_valid: {form.is_valid()}")
        print(f"Form cleaned_data: {form.cleaned_data}")
        print(f"Object ID: {self.object.cal_pressure_id if self.object else 'None'}")
        print(f"Request method: {self.request.method}")
        print(f"Request user: {self.request.user}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö form errors
        if form.errors:
            print(f"‚ùå Form errors: {form.errors}")
            return self.form_invalid(form)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
        required_fields = ['measurement_range', 'update', 'next_due']
        for field in required_fields:
            if field in form.cleaned_data and form.cleaned_data[field]:
                print(f"‚úÖ {field}: {form.cleaned_data[field]}")
            else:
                print(f"‚ö†Ô∏è {field}: {form.cleaned_data.get(field, 'MISSING')}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö measurement_range fields
        for i in range(2, 7):
            field_name = f'measurement_range_{i}'
            if field_name in self.request.POST:
                print(f"üìù {field_name}: {self.request.POST[field_name]}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö equipment data
        print(f"=== DEBUG: Equipment data ===")
        print(f"std_id: {self.request.POST.get('std_id', 'NOT FOUND')}")
        print(f"selected_equipment: {self.request.POST.get('selected_equipment', 'NOT FOUND')}")
        for key, value in self.request.POST.items():
            if 'std_id' in key:
                print(f"Equipment field {key}: {value}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        calibration = form.save()
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å calibration ID: {calibration.cal_pressure_id}")
        
        # Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        print(f"=== DEBUG: POST data for equipment (Pressure New) ===")
        for key, value in self.request.POST.items():
            if 'std_id' in key:
                print(f"{key}: {value}")
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        equipment_ids = []
        
        # 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å selected_equipment
        selected_equipment = self.request.POST.get('selected_equipment', '')
        print(f"=== DEBUG: selected_equipment = '{selected_equipment}'")
        if selected_equipment:
            equipment_ids.extend([eid.strip() for eid in selected_equipment.split(',') if eid.strip()])
        
        # 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å form field ‡∏´‡∏•‡∏±‡∏Å (std_id)
        std_id_value = self.request.POST.get('std_id', '')
        if std_id_value:
            equipment_ids.append(std_id_value)
        
        # 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å form fields (std_id_*)
        for key, value in self.request.POST.items():
            if key.startswith('std_id_') and value and not key.startswith('std_id_existing_'):
                equipment_ids.append(value)
        
        # 4. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (std_id_existing_*)
        for key, value in self.request.POST.items():
            if key.startswith('std_id_existing_') and value:
                equipment_ids.append(value)
        
        # ‡∏•‡∏ö duplicate equipment IDs
        equipment_ids = list(set(equipment_ids))
        print(f"=== DEBUG: Final equipment_ids (unique) = {equipment_ids}")
        
        # ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        CalibrationEquipmentUsed.objects.filter(
            calibration_type='pressure',
            calibration_id=calibration.cal_pressure_id
        ).delete()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for equipment_id in equipment_ids:
            try:
                from machine.models import CalibrationEquipment
                equipment = CalibrationEquipment.objects.get(id=equipment_id)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                existing = CalibrationEquipmentUsed.objects.filter(
                    calibration_type='pressure',
                    calibration_id=calibration.cal_pressure_id,
                    equipment=equipment
                ).exists()
                
                if not existing:
                    CalibrationEquipmentUsed.objects.create(
                        calibration_type='pressure',
                        calibration_id=calibration.cal_pressure_id,
                        equipment=equipment
                    )
                    print(f"=== DEBUG: Saved equipment {equipment.name} (ID: {equipment_id})")
                else:
                    print(f"=== DEBUG: Equipment {equipment.name} (ID: {equipment_id}) already exists, skipping")
                    
            except CalibrationEquipment.DoesNotExist:
                print(f"=== DEBUG: Equipment ID {equipment_id} not found")
                continue
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        self.auto_check_status(calibration)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° success message
        messages.success(self.request, '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Pressure ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
        
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏à‡∏∞ redirect ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡πÉ‡∏´‡πâ Django ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ redirect ‡∏ï‡∏≤‡∏° success_url
        return super().form_valid(form)
    
    def auto_check_status(self, calibration):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pressure"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        has_data = any([
            calibration.set, calibration.actual,
            calibration.set_2, calibration.actual_2,
            calibration.set_3, calibration.actual_3
        ])
        
        if not has_data:
            # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• = ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            calibration.status = 'in_progress'
        else:
            # ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß = ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            if self.check_pressure_pass_fail(calibration):
                calibration.status = 'passed'
            else:
                calibration.status = 'failed'
        
        calibration.save()
    
    def check_pressure_pass_fail(self, calibration):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Pressure"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tolerance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
        rows_to_check = [
            (calibration.set, calibration.actual, calibration.tolerance_start, calibration.tolerance_end),
            (calibration.set_2, calibration.actual_2, calibration.tolerance_start_2, calibration.tolerance_end_2),
            (calibration.set_3, calibration.actual_3, calibration.tolerance_start_3, calibration.tolerance_end_3),
            (calibration.set_4, calibration.actual_4, calibration.tolerance_start_4, calibration.tolerance_end_4),
            (calibration.set_5, calibration.actual_5, calibration.tolerance_start_5, calibration.tolerance_end_5),
            (calibration.set_6, calibration.actual_6, calibration.tolerance_start_6, calibration.tolerance_end_6),
        ]
        
        for set_val, actual_val, tolerance_start, tolerance_end in rows_to_check:
            if set_val and actual_val and tolerance_start and tolerance_end:
                if not (tolerance_start <= actual_val <= tolerance_end):
                    return False
        
        return True
